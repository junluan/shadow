set(shadow_lib_src)
set(shadow_algorithm_src)
set(shadow_examples_src)

add_subdirectory(algorithm)
add_subdirectory(backends)
add_subdirectory(core)
add_subdirectory(examples)
add_subdirectory(operators)
add_subdirectory(proto)
add_subdirectory(util)

if (${USE_CUDA})
  cuda_add_library(shadow ${shadow_lib_src})
else ()
  add_library(shadow ${shadow_lib_src})
endif ()
target_link_libraries(shadow ${Shadow_LINKER_LIBS})
if (${USE_Protobuf})
  target_link_libraries(shadow ${Shadow_PROTO_LIB})
endif ()
target_include_directories(shadow PUBLIC ".")
if (APPLE)
  set_target_properties(shadow PROPERTIES INSTALL_NAME_DIR "@rpath")
endif ()
install(TARGETS shadow DESTINATION ${Shadow_INSTALL_LIB_PREFIX})
install(FILES core/config.hpp core/helper.hpp core/network.hpp core/params.hpp
        DESTINATION ${Shadow_INSTALL_INCLUDE_PREFIX}/core)

if (BUILD_SHARED_LIBS)
  set(Shadow_LIB shadow)
else ()
  add_whole_archive_flag(shadow Shadow_LIB)
endif ()

if (${BUILD_EXAMPLES})
  add_executable(test_demo ${shadow_examples_src} ${shadow_algorithm_src})
  target_link_libraries(test_demo ${Shadow_LIB})
  install(TARGETS test_demo DESTINATION ${Shadow_INSTALL_BIN_PREFIX})
endif ()

if (${BUILD_LINT})
  find_program(ClangFormat "clang-format")
  if (ClangFormat)
    set(shadow_src ${shadow_lib_src} ${shadow_algorithm_src} ${shadow_examples_src})
    add_custom_target(shadow_lint ${ClangFormat} -style=file -i ${shadow_src})
  else ()
    message(WARNING "Could not find clang-format executable")
  endif ()
endif ()
